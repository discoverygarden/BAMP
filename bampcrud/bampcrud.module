<?php
// $Id$

include 'bampcrud.wildsamplinginstances.inc';
include 'bampcrud.wildfishsamples.inc';
include 'bampcrud.farmaggregate.inc';
include 'bampcrud.farmenvironment.inc';
include 'bampcrud.farminventory.inc';
include 'bampcrud.farmfishdata.inc';
include 'bampcrud.farmsites.inc';

/**
 * @file
 * Contains code for displaying list of reports
 */

/**
 * Set up permissions for module 
 * http://api.drupal.org/api/drupal/modules--system--system.api.php/function/hook_permission/7
 */
function bampcrud_permission() {
  return array(
    'Edit data'  => array(
      'title' => t('Edit data'),
      'description' => t('Allow user to edit BAMP data.'),
      'restrict access' => TRUE,
    ),
  );
}//end ireport_perm


/**
 * Drupal Menu Hook
 * http://api.drupal.org/api/drupal/modules--system--system.api.php/function/hook_menu/7
 */
function bampcrud_menu() {
  $items = array ();
  $items['bampcrud/crud'] = array(
    'title' => 'BAMP Data Management',
    'page callback' => 'bampcrud_menu_callback',
    'access callback' => 'user_access',
    'access arguments' => array('Edit data'),
    'weight' => '1',
  );
  $items['bampcrud/crud/wildsamplinginstances'] = array(
    'title' => 'Wild Sampling Instances',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bampcrud_wild_sampling_instances_form'),
    'access callback' => 'user_access',
    'access arguments' => array('Edit data'),
  );
  $items['bampcrud/crud/wildfishsamples'] = array(
    'title' => 'Wild Fish Samples',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bampcrud_wild_fish_samples_form'),
    'access callback' => 'user_access',
    'access arguments' => array('Edit data'),
  );

  $items['bampcrud/crud/farmaggregate'] = array(
    'title' => 'Farm Aggregate',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bampcrud_farm_aggregate_form'),
    'access callback' => 'user_access',
    'access arguments' => array('Edit data'),
  );
  $items['bampcrud/crud/farmenvironment'] = array(
    'title' => 'Farm Environment',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bampcrud_farm_environment_form'),
    'access callback' => 'user_access',
    'access arguments' => array('Edit data'),
  );
  $items['bampcrud/crud/farmfishdata'] = array(
    'title' => 'Farm Fish',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bampcrud_farm_fish_data_form'),
    'access callback' => 'user_access',
    'access arguments' => array('Edit data'),
  );
  $items['bampcrud/crud/farminventory'] = array(
    'title' => 'Farm Inventory',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bampcrud_farm_inventory_form'),
    'access callback' => 'user_access',
    'access arguments' => array('Edit data'),
  );
  $items['bampcrud/crud/farmsites'] = array(
    'title' => 'Farm Sites',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bampcrud_farm_sites_form'),
    'access callback' => 'user_access',
    'access arguments' => array('Edit data'),
  );

  return $items;
}

function bampcrud_menu_callback() {
  drupal_set_title('BAMP Data Management');
  
  $content['form'] = array(
    '#markup' => '<p> This is the BAMP Data Management main menu. Please select an option from the menu on the left</p>',
  );  

  return $content;
}

/*function bampcrud_log($action, $table, $recordId, $additional){
  //Get the Drupal user ID
  global $user;
  $user = $user->name;

  //Handle logging based on which action is being performed (Create/Delete/Update)
  //Create - Logs an entry for each field/value pair. Transaction id placed in additional field for grouping output.
  //Delete - Creates a single entry with the recordId being deleted.
  //Update - Logs an entry for each field thats been changed with the old value and the new value. 
  switch($action){
    case 'Create':
      $transactionId = time();
      foreach($additional as $field=>$value){
        //Store the log information in the changelog table.
        $result = db_insert('changelog', array('target'=>'bamp_new'))
        ->fields(array(
          'user'=>$user,
          'action'=>$action,
          'dbtable'=>$table,
          'recordId'=>null,
          'field'=>$field,
          'oldvalue'=>null,
          'newvalue'=>$value,
          'additional'=>$transactionId,
        ))->execute(); 
      }//end foreach
    break;
    case 'Delete':
      //Grab existing record
      $results = db_query('SELECT * FROM {' . $table . '} WHERE id = :recordId ', array(':recordId' => $recordId), array('target' => 'bamp_new'));
      $oldRecord = $results->fetchAssoc();

      //Store the log information in the changelog table.
      $result = db_insert('changelog', array('target'=>'bamp_new'))
      ->fields(array(
        'user'=>$user,
        'action'=>$action,
        'dbtable'=>$table,
        'recordId'=>$recordId,
        'field'=>null,
        'oldvalue'=>null,
        'newvalue'=>null,
        'additional'=>serialize($oldRecord),
      ))->execute();
    break;
    case 'Update':
      //Grab existing record
      $results = db_query('SELECT * FROM {' . $table . '} WHERE id = :recordId ', array(':recordId' => $recordId), array('target' => 'bamp_new'));
      $oldRecord = $results->fetchAssoc();

      $transactionId = time();
      foreach($additional as $field=>$value){
        if($oldRecord[$field] != $value){
          //Store the log information in the changelog table.
          $result = db_insert('changelog', array('target'=>'bamp_new'))
          ->fields(array(
            'user'=>$user,
            'action'=>$action,
            'dbtable'=>$table,
            'recordId'=>$recordId,
            'field'=>$field,
            'oldvalue'=>$oldRecord[$field],
            'newvalue'=>$value,
            'additional'=>$transactionId,
          ))->execute();
        }//end if
      }//end foreach
    break;
  }//end switch
}*/
